import AppContext from '../context';
import React from 'react';

/**Лайфхак с кастомным хуком: Сам кастомный хук - это то же самое, что и функции, которые мы создаем, чтобы не писать 1 и тот же код снова и снова и использовать там где оно нам необходимо
 * Это не обязательно, но при создании кастомного хука принято, что в названии должно быть префикс use*ТутНазваниеХукаКоторыйПытаемсяСоздать. *
 */

export const useCart = () => {
	/**Желательно делать экспорт как написано выше, это читается лучше потому что у дефолта есть свои минусы
	 * Обычный экспорт позволяет при авто-комплите мне вытащить сразу же все, что мне необходимо,
	 * То с дефолтным экспортом имеются проблемы, так как авто-комплит плохо работает с дефолтным экспортом
	 * У дефолтного экспорта имеются проблемы со сборкой самого проекта.
	 * Например когда компонент нужно разделить на несколько частей, то дефолтный экспорт(далее д\э) берет все данные скопом и не разбивает наши данные для оптимизации
	 * А если использовать единичный экспорт можно каждую часть по отдельности вытаскивать и потом в нужных нам местах нашего приложения импортировать необходимые куски кода
	 * Что позволит "web-pack"-у оптимизировать наш бандл, т.е в определенных страницах моего приложения он будет испоьзовать только то, что ему необходимо, что положительно скажется на скорость загрузки сайта, и в добавок это сократит код
	 *
	 */
	const { cartItems, setCartItems } = React.useContext(AppContext);
	const totalPrice = cartItems.reduce((sum, obj) => obj.price + sum, 0);
	/**Здесь создал функцию при помощи reduce для того, чтобы сложить 2 значения obj.price и sum, где sum по умолчанию будет 0
	 * То, что sum будет равен 0, говорит цифра 0 в функции после запятой*/

	return {
		cartItems,
		setCartItems,
		totalPrice,
	};
	/**Здесь можно вернуть как массив, так и объект. Что хотим, то и возвращаем.
    Плюс массива в том, что можно какие угодно имена задавать при деструктуризации. А можно использовать объект и вытаскивать те свойства, которые мы указали внутри {} */
};
